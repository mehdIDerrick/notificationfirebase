import os
from fastapi import FastAPI, HTTPException, Body, UploadFile, File
from firebase_admin import credentials, initialize_app, messaging
from pydantic import BaseModel
import csv
from pymongo.server_api  import ServerApi
from pymongo.mongo_client import MongoClient

app = FastAPI()


class TokenData(BaseModel):
    phone: str
    token: str

# Use environment variables for Firebase credentials
####
cred = credentials.Certificate({
  "type": "service_account",
  "project_id": "orangetunisie-4ae1c",
  "private_key_id": "2e91bac2601fd69f1e61778edb77f5e667068bab",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDSXBFCy90jHu0F\nZd9RyFPzGGLF1xwJf8QQkre4A/OI6vJJMksluLM53WgFInXcln4SQ9fSnNEEKhl6\n0z4H9++iW79DG1tuEjONNCToUq3vDgIm8xQD1jUefvrcQyhjATmsiph7v25d2vad\nNC23t37E8WxoI3tXbxAttOtJV6atAhMdGYgDi+jOj24GJKCg3f5WFFCCXCL7zNDv\nE2FVf4lB1eK7p4WfeE0mIZOwgSpYTc95soHTKieyp/vBFPGd3KmFvlipyhnpKFx3\nL5iDl5KvlIEGyqMV6Iu1ImBLvSy4pTH3X3jsWCvJycLmhbzOi86oxmZ/qcl3eMj6\nplnG4KYvAgMBAAECggEAB9umlo8wbkXcL+3cteXPIrhQDfjCtFwiwiDfzFM849e/\niPXgJHopZFvUiMbaoIy5ecKfUARb6ed7jZxRFVGw/l+BlNSYEsGLBOBR7KDvwPlX\nIc/qeQ9cazES1savdRtUwOxFC/ATKF4Zu/+darp6MIoLosw/X7QL+M/7LzhV/gXa\n4RwmuaQuf1FUfI6LlQsrXJek1Rxl7K8wdtBdLH7pyyU6I6h6l83KC4A4wpm3tALY\n0E0/JrflGTNquPcY3QE6pqwTYwosMRT+EROfZ5qaffvgxcX5vE3ikugtLkKFXQum\nLn+Ka3HwH0lw324OgxHfeaGpVuW8zwUHWWG3OwrgmQKBgQD12494xtwcWaIdFggd\nenF4NE3o6UlqDJFHfKkG8seFP2um2Q0exOBQokgxdf2JVbJPy0K5ejDcE5Hi1vqv\nAqAMBOoJgb+mGTQq3pg4zpS+5YOnNOjS8bd+scEIIVFte9RTRukrza0RCy9UKPyA\nv8Vk6djyvP+6rI6HLORVl56cUwKBgQDbCZ8cLjTH8+/NLYUclLm2minOMN5Mug4E\n1o0C81+f4snD7TRcZbSMr3iswpVQbkVd+suuaweQ2d/7vpsTyyogqHmB2GuSpgRy\nNmdPttUqV0j0iU7ALDz/2CUHXOYxJMdUkWtQrTfmUSZy5E8GjMkLhWpLtjZnvx2i\n9xnGf8tzNQKBgDTRASZiGiEhBFmZRQ8IId4/5kjV7QaSQpeH6Uvr1f8DG95RHKdy\nhfnskvPFND1PoqnPsbrkzCBLN/jyVBJKzxUl7R0zuXc2TOW0wiDaCExmQ/0kuauv\nb8sQ5rYXakXJ51gokKjvW3Gg5H8A+xWxnPdL4WZsQcfZkBjsBPV6SAGvAoGAeldU\nbIwOZQSGE0byi3UyiaBv6z/2WkqtW9xuZJCE/6vPYETUMyuHffDgaTZB6eu9iPF0\n5JXZYvmelmDvA0492IHhZDn6U62w3A4xBCAtzfl0wUkUGFhdNdWHUSZ9WEOfpkeW\n9jfZ+iWnYRLOZO0rueip52H931Kq/gQgfHOSsmUCgYBaqRA7oKUcenhOFR+LDEPb\nFUg7uI+ksWMphkvFq58H5jhiB/5zfJfqh2AluWG/AkWCNahLGeg/MhWPYt9aXvAB\n6aFoQhH2RDrX6fbAY2du3I6fZdjHDr8w2Lk01J1j6ySA7t9GeR1wCrbmfvq8jQ5s\npBl1Ei2P0IZbRt+EOCaZIA==\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-mqrp9@orangetunisie-4ae1c.iam.gserviceaccount.com",
  "client_id": "103304431877193384786",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-mqrp9%40orangetunisie-4ae1c.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
})
#mongodb+srv://mohamedmehdifa:JQHMhUdbdLmY8ovb@cluster0.oiy2ol2.mongodb.net/
 # Connexion à MongoDB
#uri ="mongodb+srv://mohamedmehdifa:JQHMhUdbdLmY8ovb@cluster0.oiy2ol2.mongodb.net/"
uri = "mongodb+srv://mohamedmehdifa:Admin&1@cluster0.oiy2ol2.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(uri)

# Test the connection

db = client["my_orange"]  # Remplacez "your_database_name" par le nom de votre base de données MongoDB
token_collection = db["user_orange"] 

firebase_app = initialize_app(cred)

@app.post("/register-token/")
async def register_token(token_data: TokenData):
    phone = token_data.phone
    token = token_data.token
    print(f"Phone: {phone}, Token: {token}")

    # Verify if the token already exists
    existing_token = token_collection.find_one({"phone": phone})
    if existing_token:
        # Update the existing token
        token_collection.update_one({"phone": phone}, {"$set": {"token": token}})
    else:
        # Add a new token
        token_collection.insert_one({"phone": phone, "token": token})

    return {"success": True, "message": "Token and phone number registered/updated successfully."}


    
@app.post("/send-notification/")
async def send_notification(phone: str, title: str, body: str):
    token_collection = app.mongodb["tokens"]
    token_data = await token_collection.find_one({"phone": phone})
    if token_data is None:
        raise HTTPException(status_code=404, detail="Token not found")
    message = messaging.Message(
        notification=messaging.Notification(title=title, body=body),
        token=token_data["token"],
    )
    response = messaging.send(message)
    return {"success": True, "message": f"Notification sent: {response}"}